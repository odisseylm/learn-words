@file:Suppress("FunctionName", "unused", "SpellCheckingInspection", "PackageDirectoryMismatch")
package com.mvv.win.winapi.error



//https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getthreaderrormode
//
//
// SEM_FAILCRITICALERRORS = 0x0001
//   The system does not display the critical-error-handler message box. Instead, the system sends the error to the calling thread.
// SEM_NOGPFAULTERRORBOX = 0x0002
//   The system does not display the Windows Error Reporting dialog.
// SEM_NOOPENFILEERRORBOX 0x8000
//   The system does not display a message box when it fails to find a file. Instead, the error is returned to the calling thread.
//
// DWORD GetThreadErrorMode();
//



// winerror.h strsafe.h wabcode.h
// https://learn.microsoft.com/en-us/windows/win32/learnwin32/error-codes-in-com
// https://learn.microsoft.com/en-us/windows/win32/seccrypto/common-hresult-values
// https://learn.microsoft.com/en-us/office/client-developer/outlook/mapi/using-macros-for-error-handling
//
//
// Error Codes in COM
// * Success codes: 0x0–0x7FFFFFFF
// * Error codes: 0x80000000–0xFFFFFFFF


// Base errors
//
const val S_OK           = 0x0          // Success.
const val S_FALSE        = 0x1          // Success.
const val E_ACCESSDENIED = 0x80070005   // Access denied
const val E_FAIL         = 0x80004005 	// Unspecified error.
const val E_INVALIDARG   = 0x80070057 	// Invalid parameter value.

// Severities
//
const val SEVERITY_SUCCESS = 0
const val SEVERITY_ERROR   = 1
const val FACILITY_NT_BIT  = 0x10000000




// Error Handling in COM (Get Started with Win32 and C++)
// https://learn.microsoft.com/en-us/windows/win32/learnwin32/error-handling-in-com
//

const val E_OUTOFMEMORY  = 0x8007000E 	// Out of memory.
const val E_POINTER      = 0x80004003 	// NULL was passed incorrectly for a pointer value.
const val E_UNEXPECTED   = 0x8000FFFF 	// Unexpected condition.

const val E_END_OF_FILE  = 0x80070026
const val E_INSUFFICIENT_BUFFER = 0x8007007A


// Other facilities
//
const val FACILITY_NULL  = 0
const val FACILITY_RPC   = 1
const val FACILITY_WIN32 = 7
const val FACILITY_CONTROL = 10
const val FACILITY_WINDOWS = 8
const val FACILITY_SECURITY = 9

const val FACILITY_WINDOWSUPDATE = 36
const val FACILITY_WINDOWS_CE = 24
const val FACILITY_URT = 19
const val FACILITY_UMI = 22
const val FACILITY_SXS = 23
const val FACILITY_STORAGE = 3
const val FACILITY_STATE_MANAGEMENT = 34
const val FACILITY_SSPI = 9
const val FACILITY_SCARD = 16
const val FACILITY_SETUPAPI = 15
const val FACILITY_METADIRECTORY = 35
const val FACILITY_MSMQ = 14
const val FACILITY_MEDIASERVER = 13
const val FACILITY_INTERNET = 12
const val FACILITY_ITF = 4
const val FACILITY_HTTP = 25
const val FACILITY_DPLAY = 21
const val FACILITY_DISPATCH = 2
const val FACILITY_DIRECTORYSERVICE = 37
const val FACILITY_CONFIGURATION = 33
const val FACILITY_COMPLUS = 17
const val FACILITY_CERT = 11
const val FACILITY_BACKGROUNDCOPY = 32
const val FACILITY_ACS = 20
const val FACILITY_AAF = 18
const val FACILITY_AUDCLNT = 2185



// From winerror.h
//
// #define E_UNEXPECTED _HRESULT_TYPEDEF_(0x8000FFFF)
// #define E_NOTIMPL _HRESULT_TYPEDEF_(0x80004001)
// #define E_OUTOFMEMORY _HRESULT_TYPEDEF_(0x8007000E)
// #define E_INVALIDARG _HRESULT_TYPEDEF_(0x80070057)
// #define E_NOINTERFACE _HRESULT_TYPEDEF_(0x80004002)
// #define E_POINTER _HRESULT_TYPEDEF_(0x80004003)
// #define E_HANDLE _HRESULT_TYPEDEF_(0x80070006)
// #define E_ABORT _HRESULT_TYPEDEF_(0x80004004)
// #define E_FAIL _HRESULT_TYPEDEF_(0x80004005)
// #define E_ACCESSDENIED _HRESULT_TYPEDEF_(0x80070005)
// #define E_PENDING _HRESULT_TYPEDEF_(0x8000000A)
// #define E_NOT_SUFFICIENT_BUFFER HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER)
// #define CO_E_INIT_TLS _HRESULT_TYPEDEF_(0x80004006)
// #define CO_E_INIT_SHARED_ALLOCATOR _HRESULT_TYPEDEF_(0x80004007)
// #define CO_E_INIT_MEMORY_ALLOCATOR _HRESULT_TYPEDEF_(0x80004008)
// #define CO_E_INIT_CLASS_CACHE _HRESULT_TYPEDEF_(0x80004009)
// #define CO_E_INIT_RPC_CHANNEL _HRESULT_TYPEDEF_(0x8000400A)
// #define CO_E_INIT_TLS_SET_CHANNEL_CONTROL _HRESULT_TYPEDEF_(0x8000400B)
// #define CO_E_INIT_TLS_CHANNEL_CONTROL _HRESULT_TYPEDEF_(0x8000400C)
// #define CO_E_INIT_UNACCEPTED_USER_ALLOCATOR _HRESULT_TYPEDEF_(0x8000400D)
// #define CO_E_INIT_SCM_MUTEX_EXISTS _HRESULT_TYPEDEF_(0x8000400E)
// #define CO_E_INIT_SCM_FILE_MAPPING_EXISTS _HRESULT_TYPEDEF_(0x8000400F)
// #define CO_E_INIT_SCM_MAP_VIEW_OF_FILE _HRESULT_TYPEDEF_(0x80004010)
// #define CO_E_INIT_SCM_EXEC_FAILURE _HRESULT_TYPEDEF_(0x80004011)
// #define CO_E_INIT_ONLY_SINGLE_THREADED _HRESULT_TYPEDEF_(0x80004012)
// #define CO_E_CANT_REMOTE _HRESULT_TYPEDEF_(0x80004013)
// #define CO_E_BAD_SERVER_NAME _HRESULT_TYPEDEF_(0x80004014)
// #define CO_E_WRONG_SERVER_IDENTITY _HRESULT_TYPEDEF_(0x80004015)
// #define CO_E_OLE1DDE_DISABLED _HRESULT_TYPEDEF_(0x80004016)
// #define CO_E_RUNAS_SYNTAX _HRESULT_TYPEDEF_(0x80004017)
// #define CO_E_CREATEPROCESS_FAILURE _HRESULT_TYPEDEF_(0x80004018)
// #define CO_E_RUNAS_CREATEPROCESS_FAILURE _HRESULT_TYPEDEF_(0x80004019)
// #define CO_E_RUNAS_LOGON_FAILURE _HRESULT_TYPEDEF_(0x8000401A)
// #define CO_E_LAUNCH_PERMSSION_DENIED _HRESULT_TYPEDEF_(0x8000401B)
// #define CO_E_START_SERVICE_FAILURE _HRESULT_TYPEDEF_(0x8000401C)
// #define CO_E_REMOTE_COMMUNICATION_FAILURE _HRESULT_TYPEDEF_(0x8000401D)
// #define CO_E_SERVER_START_TIMEOUT _HRESULT_TYPEDEF_(0x8000401E)
// #define CO_E_CLSREG_INCONSISTENT _HRESULT_TYPEDEF_(0x8000401F)
// #define CO_E_IIDREG_INCONSISTENT _HRESULT_TYPEDEF_(0x80004020)
// #define CO_E_NOT_SUPPORTED _HRESULT_TYPEDEF_(0x80004021)
// #define CO_E_RELOAD_DLL _HRESULT_TYPEDEF_(0x80004022)
// #define CO_E_MSI_ERROR _HRESULT_TYPEDEF_(0x80004023)
// #define CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT _HRESULT_TYPEDEF_(0x80004024)
// #define CO_E_SERVER_PAUSED _HRESULT_TYPEDEF_(0x80004025)
// #define CO_E_SERVER_NOT_PAUSED _HRESULT_TYPEDEF_(0x80004026)
// #define CO_E_CLASS_DISABLED _HRESULT_TYPEDEF_(0x80004027)
// #define CO_E_CLRNOTAVAILABLE _HRESULT_TYPEDEF_(0x80004028)
// #define CO_E_ASYNC_WORK_REJECTED _HRESULT_TYPEDEF_(0x80004029)
// #define CO_E_SERVER_INIT_TIMEOUT _HRESULT_TYPEDEF_(0x8000402A)
// #define CO_E_NO_SECCTX_IN_ACTIVATE _HRESULT_TYPEDEF_(0x8000402B)
// #define CO_E_TRACKER_CONFIG _HRESULT_TYPEDEF_(0x80004030)
// #define CO_E_THREADPOOL_CONFIG _HRESULT_TYPEDEF_(0x80004031)
// #define CO_E_SXS_CONFIG _HRESULT_TYPEDEF_(0x80004032)
// #define CO_E_MALFORMED_SPN _HRESULT_TYPEDEF_(0x80004033)
// #define S_OK ((HRESULT)0x00000000)
// #define S_FALSE ((HRESULT)0x00000001)
// #define OLE_E_FIRST ((HRESULT)0x80040000)
// #define OLE_E_LAST ((HRESULT)0x800400FF)
// #define OLE_S_FIRST ((HRESULT)0x00040000)
// #define OLE_S_LAST ((HRESULT)0x000400FF)
// #define OLE_E_OLEVERB _HRESULT_TYPEDEF_(0x80040000)
// #define OLE_E_ADVF _HRESULT_TYPEDEF_(0x80040001)
// #define OLE_E_ENUM_NOMORE _HRESULT_TYPEDEF_(0x80040002)
// #define OLE_E_ADVISENOTSUPPORTED _HRESULT_TYPEDEF_(0x80040003)
// #define OLE_E_NOCONNECTION _HRESULT_TYPEDEF_(0x80040004)
// #define OLE_E_NOTRUNNING _HRESULT_TYPEDEF_(0x80040005)
// #define OLE_E_NOCACHE _HRESULT_TYPEDEF_(0x80040006)
// #define OLE_E_BLANK _HRESULT_TYPEDEF_(0x80040007)
// #define OLE_E_CLASSDIFF _HRESULT_TYPEDEF_(0x80040008)
// #define OLE_E_CANT_GETMONIKER _HRESULT_TYPEDEF_(0x80040009)
// #define OLE_E_CANT_BINDTOSOURCE _HRESULT_TYPEDEF_(0x8004000A)
// #define OLE_E_STATIC _HRESULT_TYPEDEF_(0x8004000B)
// #define OLE_E_PROMPTSAVECANCELLED _HRESULT_TYPEDEF_(0x8004000C)
// #define OLE_E_INVALIDRECT _HRESULT_TYPEDEF_(0x8004000D)
// #define OLE_E_WRONGCOMPOBJ _HRESULT_TYPEDEF_(0x8004000E)
// #define OLE_E_INVALIDHWND _HRESULT_TYPEDEF_(0x8004000F)
// #define OLE_E_NOT_INPLACEACTIVE _HRESULT_TYPEDEF_(0x80040010)
// #define OLE_E_CANTCONVERT _HRESULT_TYPEDEF_(0x80040011)
// #define OLE_E_NOSTORAGE _HRESULT_TYPEDEF_(0x80040012)
// #define DV_E_FORMATETC _HRESULT_TYPEDEF_(0x80040064)
// #define DV_E_DVTARGETDEVICE _HRESULT_TYPEDEF_(0x80040065)
// #define DV_E_STGMEDIUM _HRESULT_TYPEDEF_(0x80040066)
// #define DV_E_STATDATA _HRESULT_TYPEDEF_(0x80040067)
// #define DV_E_LINDEX _HRESULT_TYPEDEF_(0x80040068)
// #define DV_E_TYMED _HRESULT_TYPEDEF_(0x80040069)
// #define DV_E_CLIPFORMAT _HRESULT_TYPEDEF_(0x8004006A)
// #define DV_E_DVASPECT _HRESULT_TYPEDEF_(0x8004006B)
// #define DV_E_DVTARGETDEVICE_SIZE _HRESULT_TYPEDEF_(0x8004006C)
// #define DV_E_NOIVIEWOBJECT _HRESULT_TYPEDEF_(0x8004006D)
// ...
// ...
// ...


// #define MAKE_MAPI_SCODE(sev,fac,code) ((SCODE) (((unsigned __LONG32)(sev)<<31) | ((unsigned __LONG32)(fac)<<16) | ((unsigned __LONG32)(code))))
//
// #define MAKE_MAPI_E(err) (MAKE_MAPI_SCODE(1,FACILITY_ITF,err))
// #define MAKE_MAPI_S(warn) (MAKE_MAPI_SCODE(0,FACILITY_ITF,warn))
//
// #define MAPI_E_NO_SUPPORT MAKE_MAPI_E(0x102)
// #define MAPI_E_BAD_CHARWIDTH MAKE_MAPI_E(0x103)
// #define MAPI_E_STRING_TOO_LONG MAKE_MAPI_E(0x105)
// #define MAPI_E_UNKNOWN_FLAGS MAKE_MAPI_E(0x106)
// #define MAPI_E_INVALID_ENTRYID MAKE_MAPI_E(0x107)
// #define MAPI_E_INVALID_OBJECT MAKE_MAPI_E(0x108)
// #define MAPI_E_OBJECT_CHANGED MAKE_MAPI_E(0x109)
// #define MAPI_E_OBJECT_DELETED MAKE_MAPI_E(0x10A)
// #define MAPI_E_BUSY MAKE_MAPI_E(0x10B)
// #define MAPI_E_NOT_ENOUGH_DISK MAKE_MAPI_E(0x10D)
// #define MAPI_E_NOT_ENOUGH_RESOURCES MAKE_MAPI_E(0x10E)
// #define MAPI_E_NOT_FOUND MAKE_MAPI_E(0x10F)
// #define MAPI_E_VERSION MAKE_MAPI_E(0x110)
// #define MAPI_E_LOGON_FAILED MAKE_MAPI_E(0x111)
// #define MAPI_E_SESSION_LIMIT MAKE_MAPI_E(0x112)
// #define MAPI_E_USER_CANCEL MAKE_MAPI_E(0x113)
// #define MAPI_E_UNABLE_TO_ABORT MAKE_MAPI_E(0x114)
// #define MAPI_E_NETWORK_ERROR MAKE_MAPI_E(0x115)
// #define MAPI_E_DISK_ERROR MAKE_MAPI_E(0x116)
// #define MAPI_E_TOO_COMPLEX MAKE_MAPI_E(0x117)
// #define MAPI_E_BAD_COLUMN MAKE_MAPI_E(0x118)
// #define MAPI_E_EXTENDED_ERROR MAKE_MAPI_E(0x119)
// #define MAPI_E_COMPUTED MAKE_MAPI_E(0x11A)
// #define MAPI_E_CORRUPT_DATA MAKE_MAPI_E(0x11B)
// #define MAPI_E_UNCONFIGURED MAKE_MAPI_E(0x11C)
// #define MAPI_E_FAILONEPROVIDER MAKE_MAPI_E(0x11D)
// #define MAPI_E_END_OF_SESSION MAKE_MAPI_E(0x200)
// #define MAPI_E_UNKNOWN_ENTRYID MAKE_MAPI_E(0x201)
// #define MAPI_E_MISSING_REQUIRED_COLUMN MAKE_MAPI_E(0x202)
// #define MAPI_W_NO_SERVICE MAKE_MAPI_S(0x203)
// #define MAPI_E_BAD_VALUE MAKE_MAPI_E(0x301)
// #define MAPI_E_INVALID_TYPE MAKE_MAPI_E(0x302)
// #define MAPI_E_TYPE_NO_SUPPORT MAKE_MAPI_E(0x303)
// #define MAPI_E_UNEXPECTED_TYPE MAKE_MAPI_E(0x304)
// #define MAPI_E_TOO_BIG MAKE_MAPI_E(0x305)
// #define MAPI_E_DECLINE_COPY MAKE_MAPI_E(0x306)
// #define MAPI_E_UNEXPECTED_ID MAKE_MAPI_E(0x307)
// #define MAPI_W_ERRORS_RETURNED MAKE_MAPI_S(0x380)
// #define MAPI_E_UNABLE_TO_COMPLETE MAKE_MAPI_E(0x400)
// #define MAPI_E_TIMEOUT MAKE_MAPI_E(0x401)
// #define MAPI_E_TABLE_EMPTY MAKE_MAPI_E(0x402)
// #define MAPI_E_TABLE_TOO_BIG MAKE_MAPI_E(0x403)
// #define MAPI_E_INVALID_BOOKMARK MAKE_MAPI_E(0x405)
// #define MAPI_W_POSITION_CHANGED MAKE_MAPI_S(0x481)
// #define MAPI_W_APPROX_COUNT MAKE_MAPI_S(0x482)
// #define MAPI_W_PARTIAL_COMPLETION MAKE_MAPI_S(0x680)
// #define MAPI_E_AMBIGUOUS_RECIP MAKE_MAPI_E(0x700)
// #define MAPI_E_COLLISION MAKE_MAPI_E(0x604)
// #define MAPI_E_NOT_INITIALIZED MAKE_MAPI_E(0x605)
// #define MAPI_E_FOLDER_CYCLE MAKE_MAPI_E(0x60B)


// #define STRSAFE_E_INSUFFICIENT_BUFFER ((HRESULT)0x8007007A)
// #define STRSAFE_E_END_OF_FILE ((HRESULT)0x80070026)
